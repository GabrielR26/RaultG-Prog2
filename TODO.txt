_octree

_QT c++

_Maya

_socket + websocket

_smartPtr




Single responsability : une classe, une fonction ou une méthode doit avoir une et une seule unique raison d'être modifiée
Open/Close : 		une entité applicative doit être fermée à la modification directe mais ouverte à l'extension
Liskov substitution : 	instance T peut être remplacée par instance G, tel que G sous-type de T, sans modifié la cohérence du programme
Interface segregation : préférer plusieurs interfaces spécifiques pour chaque client plutôt qu'une seule interface générale
Dependency inversion :  il faut dépendre des abstractions, pas des implémentations



struct Entity_Asset
{
	int heal_point = 0;
	int damage_point = 0;
	float speed = 0;
	float cooldown = 0;
	float range = 0;

	Entity_Asset() {};
	Entity_Asset(int _heal_point, int _damage_point, float _speed, float _cooldown, float _range)
	{
		heal_point = _heal_point;
		damage_point = _damage_point;
		speed = _speed;
		cooldown = _cooldown;
		range = _range;
	}
};

