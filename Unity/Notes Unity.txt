Suppr: Library

using UnityEngine; => base
using UnityEditor; => Editor
using UnityEngine.UI; => UI
using TMPro; => UI++
using System; => C#


Optimisation:
	Cashing = répétition -> stock (!= _tmp)
	operation couteuse -> stock
	dico/map == manager (camera, ...)
	except mieux car - secu (- rsc)


Attention : Script cumulable
		Update : begin, ..., end
		MonoBehaviour (=component) -> AUCUN constructor
		Stocker getComponent (~> Awake)
		Game -> JAMAIS Free Aspect
		image = sprite MAIS raw image = texture
		échelle == unreal/100
		Use Task -> fais sortir de UnityEngine (=>System) donc g.o non
		x = right; y = up; z = forward


MonoBehaviour <- Behaviour <- Component <- Object (<- Object C#)
				|> Transform <|


Awake ~= constructor
Start = BeginPlay
Update = Tick
Destroy = lui ou component

Ordre:
	Awake(-1) -> Start(0) -> Update(x) -> Destroy(.)
				     |-> LateUpdate, FixedUpdate, ...

LateUpdate: modif transform
	ex: camera follow player 
				  |-> get loc update
		|-> set loc late   

[SerializeField]: ~UPROPERTY
	pointeur vers compo = ObjectPtr + SubClassOf
	!! pour serial struct/class/... (natif) => [System.Serializable] avant def
	HEADER("") = group, RANGE( , ) = min/max/clamp, HideInInspector, 
    +   [field:SerializeField] public Type Accesser { get; private set; }

New:
	myObject = new GameObject();
        myObject = new GameObject("Name", new System.Type[] {
            typeof(component)
        });
  ou	GameObject.CreatePrimitive(PrimitiveType.form);
  ou	gameObject.AddComponent<Class>(); (component)
  ou  	Instantiate(Object/MonoBehaviour) => clone
	Attention boucle

Prefab: (=blueprint)
	Pack/Unpack
	Prefabception

Canvas:
	Attention screen
	si error click : check Raycaster, EventSystem et RaycastTarget
	chaque Selectable (UI) parantage autres

Event:
	event Action == C#
	UnityEvent == Unity -> Serializable
	+= == AddListener()

PreProcess directive:
	#if
		...
	#endif

Coroutine: (MonoBehaviour)
	yield return xx -> att condition xx
	retourne TJR IEnumerator (Start can be)
	lancer -> StartCoroutine(Funct)
	  + StopCoroutine(Funct), StopAllCoroutines(), ...

Debug: 
	Debuf.log("");
	Debuf.logError("");
	void OnDrawGizmos()		!!perte frame
	{
		Gizmos.color...
		Gizmos.Draw...
	}
	[ExecuteInEditMode] avand def

Camera:
	pls camera(component)
	last frame (first archi unity) == view
	clipping planes far == dist affichage (+réduire)
	!! anti-aliasing, post-process, background, 

Exception:
	throw new Exception...();
	=> custom except (override Message)
		try ()
		{}
		catch(except/custom)
		{ 
			stackTrace, Message
		}

Animation de var:
	expression => curve 
	AnimationCurve alpha -> alpha.Evaluate(Time.time)

DataAssets: (ScriptableObject)
	heritage => ScriptableObject + [CreateAssetMenu(fileName = "name asset", menuName = "menu path")] avant def
	!! pour modif dynamic => creer instance (pas new)
		-> T _new = ScriptableObject.CreateInstance<T>(...) asset base
		-> T _copy = Instantiate<T>(T _objCopy) copy asset
	  sinon repercute
	!! modif play se save

Dependance Component:
	[RequireComponent (typeof(NameCompo))] avant def
	-> ajoute auto le NameCompo sur object
	-> ne peut pas etre remove sans compo mère

Rotation:
	Euler => angle (pitch, yaw, roll)(Vector3) 	-> blocage cadran
	Quaternion => matrice 4,4 (Quaternion)		-> pas blocage
	convertir Euler -> Quaternion (=> Lerp, rotateToward,...)

Singleton:
	(Unity//Camera_GD//Singleton)
	manager, centraliser... (ex: camera, level,...)

Overlapping : Trigger (collider)
	component collider
	work: au moins 1 GO. <= rigidBody(solveur)
	      isTrigger = true -> trigger event (fantome)
			= false -> collision event (solid)
	tester collide -> test component
	custom layer: project settings/physics

Raycast: (line, shapes...) Physics
	work : collider, depart, direction (!echelle), layer(mask)
	infos : position, distance et object (...) d'impact (Tick ou ponctuel)
	!! 1 ou pls cibles

LayerMask: 
	0->32 (0x20)
	NOT : ~
	!! LayerMask = ~(0x..)

Timer:
	Start()->InvokeRepeating(nameof(method), time, repeat);
		CancelInvoke();
	Timer timer = new Timer(); timer.Elapsed += (o, e) => method; timer.Interval = time(ms); timer.Start();

FBX:  si change -> apply
    Model:
	Read/Write -> change dynamic mesh
	!! scale factor && convert unit && bake axis
    Animation:
	decouper sequence anim (nom)
	!! Loop
    Materials:
	extract Texture & Materials (! fix)

Animator:
	Animator controller(compo) add characater
	   |=> state machine (enter/stay/exit state)
	   |+> animation clip (triangle sur anim)
	Condition (param): si aucune = has exit time
		float: test < / > (int : =)
		bool : test true/false
		trigger: bool auto
	Any State: trigered partout (Ex: anim mort)
	blend space = blend tree
   Macro param's name -> .StringToHash("name")

State (machine):
	notif enter/stay/exit state
	script state = StateMachineBehaviour
		|-> event spécifique

Chara Movement: 
	CharacterController(compo)
	!! Move != SimpleMove(gravity)

Input: 
	oldSchool: Input.GetKey(/up/down)/Axis("name")
			name -> project sett/Input manager
	enhanced: window/packageManager/input System (install & restart !!sans error)
		using UnityEngine.InputSystem (si KO: preferences/External tools-> registry pack v -> regen & recompile -> registry pack x -> regen & recomp)
		Input action -> Properties = action : return value, interact: trigger, processor: modifier
				Actions= new binding (par rapport properties)
			|-> Generate C# class
		code: Unity/Character/Inputs

Input Action:
	rebind: input must disable -> InputActionRebindingExtensions.RebindingOperation _rebindOps = name.PerformInteractiveRebinding();
	axis/vector = inputName.ReadValue<type>, bouton = inputName.ReadValuesAsButton();
	OnEnable() { inputName = class gen.mapName.InputName; inputName.Enable(); } && Disable { inputName.Disable(); }
	manette prio sur clavier/souris -> 2 = passTrough

Projection:
	camera.Screen/ViewportTo... 
	screen = screen window, viewport = game window, world = in game
	!!convertion, viewport normalize
	Ex: Unity/WorldInteraction/Projection

Tool:	
	dossier 'Editor' -> script editeur 
	   |			|-> using UnityEditor;
	   |			    [CustomEditor(typeof(NameComponent))]
	   |			    heritage = Editor
	   |			|-> instance: nameComponent name = (nameComponent)target;
	   |			|-> void Start() == void OnEnable()
	dossier 'Runtime' -> script component
				|-> method

   	Method: void OnEnable(), override void OnInspectorGUI(), void OnSceneGUI(), DestroyImmediate(go),
  	Class: GUI, GUILayout, GUIStyle, GUISkin, GUIContent, EditorUtility, EditorGUI, EditorGUILayout, Handles
	IMGUI : !! ordre && synthaxe

	recup SerializeField: SerializedProperty prop;
				OnEnable() { prop = serializedObject.FindProperty("nameProp"); }
					si class.prop -> FindProperty("class.nameProp")
				prop.cast (int/string/...Value)
	Set SerializeField: GUI -> EditorGUILayout.'cast'Slider/Field/(...)
				serializedObject.ApplyModifiedProperties(); -> fin OnInspectorGUI()

	Button = GUILayout.Button(..)
	info = GUIContent(...)
	Message = EditorGUILayout.HelpBox(...)
	Popup = EditorUtility.DisplayDialog(...)
	~Gizmos = Handles.Draw.../Label/...	-> OnSceneGUI()
	UI = Handles.BeginGUI(); ...;  Handles.EndGUI();
	Window = GUILayout.Window(id, rect, FUNC, string);
					     |-> fonction(_id) -> contenue: prop, label, button...
		-> Drag = Rect window = GUILayout.Window(...) -> func {  GUI.DragWindow(); }
			!! Clamp window.x/y

    	!! pas error compile -> DANGER
	   method public pour access 
	   save data / must save: EditorUtility.SetDirty(this);
	   
	Exemple: Unity/Outils

Window:
	heritage: EditorWindow
	code : Type _window = EditorWindow.CreateWindow<Type>("title");
		 _window.Show();
	!! link asset/compo/... for edit var


Resources: 
	dossier unity, pls possibe (regroupe)
	find resource: Type Resources.Load<type>("name");
						    |-> name sans ext
		    				        name = path (file/name)
						        same name !!
	!! pas compressé -> lourd


Barre outils:
	add: [MenuItem("path")]
		public static void Method() 
		{
			//Create/Get window
			//create GameObject
		} => action 
	path = ~dossier/fichier


EXO: 




