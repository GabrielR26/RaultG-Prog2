Suppr: Library


using UnityEngine; => base
using UnityEditor; => Editor
using UnityEngine.UI; => UI
using TMPro; => UI.text +


Optimisation:
	Cashing = répétition -> stock (!= _tmp)
	operation couteuse -> stock


Attention : Script cumulable
		Update : begin, ..., end
		MonoBehaviour (=component) -> AUCUN constructor
		Stocker getComponent (~> Start)
		Game -> JAMAIS Free Aspect
		image = sprite MAIS raw image = texture


MonoBehaviour <- Behaviour <- Component <- Object (<- Object C#)
					 |> Transform <|


Awake ~= constructor
Start = BeginPlay
Update = Tick
Destroy = lui ou component

Ordre:
	Awake(-1) -> Start(0) -> Update(x) -> Destroy(.)
					  |-> LateUpdate, FixedUpdate, ...

LateUpdate:
	ex: camera follow player 
				  |-> get loc update
		|-> set loc late   

[SerializeField]: UPROPERTY
		pointeur vers compo = ObjectPtr + SubClassOf


New:
	myObject = new GameObject(); (gameObject);
        myObject = new GameObject("Name", new System.Type[] {
            typeof(component)
        });
	   GameObject.CreatePrimitive(PrimitiveType.form);
  ou	gameObject.AddComponent<Class>(); (component)
  ou  Instantiate(GameObject/MonoBehaviour)
	Attention boucle

Prefab: (=blueprint)
	Pack/Unpack
	Prefabception

Canvas:
	Attention screen
	si error click : check Raycaster, EventSystem et RaycastTarget
	chaque Selectable (UI) parantage autres

Event:
	+= => AddListener()

PreProcess directive:
	#if
		...
	#endif

Wait/Sync: coroutine
	yield return xx -> att condition xx
	retourne TJR IEnumerator (Start can be)
	lancer -> StartCoroutine(Funct)
	  + StopCoroutine(Funct), StopAllCoroutines(), ...

Debug: 
	Debuf.log("");
	Debuf.logError("");






